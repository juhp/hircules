2003-10-05  Jens Petersen  <petersen@haskell.org>

	* configure.ac: Version 0.3.

	* lib/WordString.hs (wtail): No redundant binding to first.
	(wnth): Return empty string if over range.
	(split): Drop redundant binding to xs.

	* lib/MaybeDo.hs (maybeDo): Reverse order of args.

	* lib/Debug.hs (debug): Take a string label.

	* lib/Charset.hs (encodeCharset): Maybe takes a charset.  When
	charset given transcode to it from utf-8 , otherwise just encodeUTF8. 
	(word8ToChar): Define at toplevel.
	(charToWord8): Ditto.

	* configure.ac: Bump version to 0.2.90.

	* Makefile.am (LIBMODULES): Add TextBufferCreateTag.hs.
	(PACKAGES): net is now called network in ghc-6.0.1.
	(hircules_SOURCES): Add EntryArea.hs.
	(HCFLAGS): Add -Wall.
	(hircules$(EXEEXT)): Drop -W and don't strip.
	(ghci): Run versioned ghci.

	* Main.hs: Only import beep and mainGUI from Gtk.  Import Channel.
	(main): Allow zero or one args.
	(progname): Add type signature.
	(help): Maybe takes a server arg.
	(doUNKNOWN): Use ircDisplayAll.
	(doQUIT): Write to Channel not IRCChannel.
	(doPART):  maybeDo args reversed.
	(doNICK): Write to Channel not IRCChannel.
	(doTOPIC): Use ircDisplayAlert.
	(doDisplay): Use ircDisplayAll.  ircDisplay takes Channel now.
	(transform): transform now returns highlight Bool too.  
	(transform'): Add appropriate highlighting booleans to cases.
	Use rest instead of all.
	(formatCTCP): Drop redundant user arg.
	(doPRIVMSG): Don't require colon after nick in public message.
	(doPublicMsg): Use ircDisplayAlert.
	(processInput): Now takes a list of lines rather than just a
	single line of input.
	(processInput'): Most of processInput moved to here.  Don't
	highlight tab for output.  Use ircDisplayAll.  Handle "joining"
	virtual channels.  handle new CODING command to show and set
	channel write coding-system.  Use ircWriteEnc otherwise.  Recurse
	for multiple lines of input.
	(parseCmd): No longer takes redundant IRCChannel arg.  Treat QUIT
	with args specially.
	(publicChan): No longer takes redundant chan arg.

	* IRC.hs: Export ircDisplayAlert, ircDisplayAll, ircWriteEnc
	and setChannelCoding.  Only import connectTo, withSocketsDo,
	PortID from Network.  Import System.Locale and System.Time.
	No longer import Gtk.  Import Channel and EntryArea.setNickText.
	(IRCMessage): Use tale in Show instance.
	(ircnick): Add a type signature.
	(mkIrcMessage): Use tale instead of tail.
	(setNick): Use setNickText.
	(ircPrivmsg'): Drop redundant who arg.
	(ircWriteEnc): New function like ircWrite, but encodes text in
	channel's coding-system.
	(ircDisplay): Now takes Channel instead of IRCChannel and new
	alert arg to flag tab highlighting.
	(ircDisplayAll): New function for writing to allchannel.
	(ircDisplayAlert): Ditto for alertchannel.
	(runIRC): Maybe take a server.
	(runIRC'): Put virtual channels into initChans.
	(readerLoop'): Use writeTextRaw.
	(writerLoop'): Ditto.
	(encodeMessage): No longer call encodeCharset.
	(lowQuote): Removed for now.
	(lowDequote): Ditto.
	(ircInstallModule): Use modl instead of mod.
	(ircLoadModule): Use maybeDo.
	(checkPrivs): Add type signature.
	(stripMS): Ditto.
	(logMessage): Prepend date too to log messages.
	(dateStamp): New function to generate date in iso format.
	(setChanUsers): maybeDo args reversed.
	(setChanUsers'): No longer take redundant users arg.
	(joinChanUser): maybeDo args reversed.
	(joinChanUser'): No longer take redundant users arg.
	(partChanUser): maybeDo args reversed.
	(partChanUser'): No longer take redundant users arg.
	(displayIRCchannel): maybeDo args reversed.
	(setChannelCoding): New function to change chancoding of channel.

	* GUI.hs: Import MaybeDo.
	(displayChannelTab): Use a label for the notebook tab.
	(newIRCchannel): Init chancoding to Nothing.
	(hideIRCchannel): Use maybeDo.
	(Interactive): Now a pair of a list of strings and a Channel,
	rather than a string and a IRCChannel.
	(sendInput): Adjust for above change of Interactive.

	* Channel.hs: Add Channel type alias.
	Add chancoding field to IRCChannel.

2003-09-12  Jens Petersen  <petersen@haskell.org>

	* GUI.hs: IRCChannel moved to Channel module.  Export writeTextRaw.
	Import Channel, Debug, EntryArea.setEditable.  Hide Event when 
	importing Gtk.	Import WordString, TextBufferCreateTag, 
	TextView.afterPasteClipboard.
	(allchannel): Prepend "%" to name.
	(rawchannel): Ditto.
	(alertchannel): Ditto.
	(setupGUI): Make default size a bit smaller.  Make notebook tab
	list scrollable and enable popup menu.  When switching pages
	update tab title.
	(bufferKeyBindings): New buffer keymap.
	(addIRCchannel): Focus textview now.
	(displayChannelTab): Use notebookAppendPageMenu instead of
	notebookAppendPage.
	(newIRCchannel): mainbox no longer needed.  Always show vertical
	scrollbar.  Create "editable" and "not-editable" tags.  Use word
	wrapping.  Default to buffer editable.  No longer use an entry box for
	input, or a nick label.  Setup a mark after nick in prompt, by
	first setting a left gravity mark and then making a right gravity
	mark there after the rest of the prompt text setup.  Put channel
	name into prompt.  Put newline in front of prompt, and endmark in
	front of that.  Tag it all uneditable.  Entrymark is after the prompt.
	Setup a buffer keymap.  Make the entryarea editable after pasting,
	so that text copied from uneditable dialog area is editable.
	(hideCurrentChannel): doRemoveNthPage nolonger takes book arg.
	(hideIRCchannel): Ditto.
	(doRemoveNthPage): book is global so don't take it as an arg.
	(writeTextLn): New argument alert, which is true when channel tab
	should be highlighted.  No longer always place cursor at end.
	Mark start of inserted text.  Unless no text yet insert a newline
	in front of output rather than after.  Make new text uneditable.
	Update tab title highlighting with alert.
	(writeTextRaw): New writeTextLn wrapper for rawchannel.
	(Interactive): Now carries a list of strings.
	(sendInput): Renamed from sendLine.  Get text from entry area
	rather than entry box now, and then delete it.
	(updateChannelTab): New function.  Add markup to highlight
	non-current channel tab titles.
	(highlightText): New function.  Make text red.
	(unhighlightText): New function.  Remove highlight markup.
	(updateTabN): New function.  Unhighlights selected tab title.

	* lib/TextBufferCreateTag.hs: New module.
	(textBufferCreateTagBool): Special case binding of varadic 
	gtk_text_buffer_create_tag for tag's with boolean properties.

	* EntryArea.hs: New module.
	(setEditable): Set the input area editable.  Needed since
	pasted uneditable text remains uneditable in textbuffer.
	(setNickText): Update nick in entry area prompt.

	* Channel.hs: New module.  Carry IRCChannel type.

2003-07-17  Jens Petersen  <petersen@haskell.org>

	* lib/Charset.hs (decodeCharset): New module, wrapping UTF8
	module, but also autodetects ISO-2022-JP and decodes it to utf-8.

	* lib/Iconv.hsc: New module based on Iconv.hs from haskell-i18n by
	Martin Norb√§ck.  Converted to .hsc so as to get error number properly.

	* lib/GdkKeys.hs: Import FFI instead of Foreign and UTFCForeign.

	* configure.ac (lambdabot): Just define LAMBDABOT to be lambdabot
	directory.

	* Makefile.am (LIBMODULES): Add Charset.hs, Iconv.hs.
	(HIRCSUBDIRS): New variable holding all subdirs including
	lambdabot if present.
	(HCFLAGS): Use it.  Add -Wall.
	(%.hs): Only define LAMBDABOT, when given.
	(ghci): Don't need -ilib.

	* Main.hs: No longer import GHC.IO and Display.  Import
	Data.Char.isAlpha.
	(processReadMessage): Handle TOPICs.
	(doJOIN): Add user to chan-user maps, so that QUIT messages
	get displayed in channel.
	(doTOPIC): New function to display changes of topic in alertchannel.
	(doPersonalMsg): Use safer botProcess wrapper instead of process.
	(doPublicMsg): Ditto.
	(processInput): Allow leading '/' in virtual channels.
	(parseCmd): Check command is all alphabet to avoid mistaking
	absolute unix paths for commands.

	* LambdaBot.hsc: Import Control.Monad.Error.catchError,
	Control.Monad.Trans.liftIO, System.IO, DictModule, MoreModule,
	TypeModule, but no longer HelloModule
	(botProcess): catchError wrapper around lambdabot process.
	(installModules): Install typeModule.

	* IRC.hs: Export IRCRWState and ircTopic. Import Charset instead
	of UTF8 and no longer import System.IO.Unsafe.unsafePerformIO.
	(ircGetChannels): Drop unused function.
	(encodeMessage): Use encodeCharset instead of encodeUTF8.
	(decodeMessage): Use decodeCharset instead of decodeUTF8.
	(ircInstallModule): Drop unused modname.
	(ircUnloadModule): Unused - comment out for now.
	(userInChan): Ditto.

	* GUI.hs: No longer import unused Control.Exception,
	Data.FiniteMap, Data.Maybe, System.Exit and Debug modules.

2003-07-07  Jens Petersen  <petersen@haskell.org>

	* lib/UTF8.hs: New module, provides decodeUTF8 and encodeUTF8.
	Original by Hallgren.  

	* configure.ac: Bump version to 0.2.50.
	(lambdabot): Fix --with-lambdabot option so that LAMBDABOT
	now holds compiler options.

	* Makefile.am (LIBMODULES): Add UTF8.hs
	(EXTRA_DIST): Add ANNOUNCE.
	(HCFLAGS): Use LAMBDABOT
	(%.hs): Filter out -i's from LAMBDABOT for hsc2hs.

	* IRC.hs: Import UTF8.
	(encodeMessage): Encode final string into utf-8.
	(decodeMessage): Decode string from utf-8.

	* ANNOUNCE: Add 0.2 announcement.

2003-07-03  Jens Petersen  <petersen@haskell.org>

	* configure.ac: Version 0.2.

	* Makefile.am (LIBMODULES): Add Directories.hs and MaybeDo.hs.
	(hircules_SOURCES): Replace LambdaBot.hs by LambdaBot.hsc.
	(hircules$(EXEEXT)): Depend on LambdaBot.hs as well.

	* IRC.hs (encodeMessage): Put composed function in parentheses.

	* hircules.spec.in: Require and use ghc-5.04.3. Don't build debuginfo package.

	* lib/MaybeDo.hs: New module, providing maybedo.

	* LambdaBot.hsc: Contains lambdabot functions previously in Main.

	* lib/WordString.hs (split): Function taken from lambdabot's Util.

	* configure.ac: Bump version to 0.1.92.
	--with-hc now doesn't need an absolute path to ghc.
	--with-lambdabot to enable lamdbabot support.

	* Makefile.am (LIBMODULES): Add Debug.hs and Display.hs.
	(LAMBDABOT): Let configure set it.
	(hircules_SOURCES): Add LambdaBot.hs.
	(HCFLAGS): Only include lambdabot when configured.
	(%.hs): Generic target from %.hsc.
	(LambdaBot.hs): New target.

	* Main.hs: Import Data.Char.toLower, Data.Maybe, Debug, Display
	[temporary], Lambdabot and MaybeDo.  No longer import Util.
	Lambdabot module imports moved to Lambdabot.
	(Flag): Add Debug.
	(options): Add debug option.
	(help): Setup debugging.
	(ircMain): liftIO getEnv.  installModules moved to Lambdabot.
	(processReadMessage): Show message when debugging.  Add PART
	and 353 handlers.
	(doJOIN): Lowercase channel name.
	(doQUIT): Only display quit message on relevant channels.  Remove
	nick from user-channels maps.
	(doPART): New function to handle part messages.  Try to hide
	channel tab when we part channel.  Update user-channel maps
	(doNICK): Update our nick if it is ours.  Display nick change on
	relevant channels.
	(doRPL_NAMREPLY): New handler to update user-channel maps, when
	receiving names list.
	(doDisplay): Show message and maybe channel name when debugging. 
	(transform): Lowercase channel name.  Call transform'.
	(transform'): Was transform.  Take the head of the middle for
	topic channel.
	(doPRIVMSG): Use botApology instead of ircPrivmsg.
	(doPersonalMsg): Beep on private messages.
	(doPublicMsg): Use botApology instead of ircPrivmsg.  Display in
	alert channel and beep.
	(processInput): Add '/' to input in virtual channel.  Use (+-+).
	For join command, if we're already on channel then display it if
	necessary, else send command if it is a public channel or make a
	private channel tab.
	(parseCmd): For empty join command put channel in middle not tail.
	Handle empty names command.  Only do /me command for real channels.

	* IRC.hs: Export displayIRCchannel, getUserChannels, joinChanUser,
	partChanUser, removeUser, renameUser and setChanUsers.
	No longer export memberChannel.  Import Data.Char.toLower, Debug,
	and MaybeDo.
	(IRCRWState): ircChannels is now a map from channel name to IRCChannel.
	Added ircUsers, stores channels each user is one.
	(msgUser): Remove any '~' before "user@host".
	(setNick): Modify nick name atomically.
	(getIRCChannel): ircChannels now just returns IRCChannel.
	(getIRCChannels): Ditto.
	(memberChannel): No longer needed.
	(addChannel): Use getIRCChannel rather than memberChannel.  Lower
	case of channel name.  Use modify rather than get and put. Call
	joinChanUser.
	(removeChannel): Use modify rather than get and put. Lowercase
	channel name.
	(runIRC): Initialise ircUsers.
	(encodeMessage): No longer takes suffix.
	(setChanUsers): New function to set all the users on a particular
	channel and channels a user is on.  Used to update user-channels
	lists when joining a channel or on receiving NAMES list.
	(joinChanUser): New function to update user-channels when a user
	joins a	channel.
	(partChanUser): New function to update user-channels when a user
	parts a channel.
	(userInChan): New function to check if a user is on a particular
	channel.
	(getUserChannels): New function to list channels a user is on.
	(addUserChan): New auxillary function to update user-channels map.
	(removeUserChan): Ditto.
	(removeUserChan): New auxillary function to remove user from
	user-channels map.
	(setUserChans): New auxillary function to update user's channels
	in user-channel map.
	(renameUser): Remap user when she changes nick.
	(displayIRCchannel): Maybe popup the named channel tab.

	* GUI.hs: Export alertchannel, displayChannelTab and hideIRCchannel.
	Import Data.Char.toLower and Debug.
	(IRCChannel): Add chanusers and chantopic fields.
	(tabchannel): Remove.
	(allchannel): Put "/" in nick label.
	(rawchannel): Ditto.  Create with addIRCchannel.
	(alertchannel): New virtual channel to alert one to personal messages.
	(mainwidget): Renamed from mainWidget.
	(setupGUI): Use mainwidget.  Remove afterSwitchPage switchPageHandler.
	(globalKeyBindings): Add Ctrl-Shift-w binding to hide channel.
	Remove F2 and F3 bindings.
	(switchToTab): Don't need withCurrentChan.
	(switchTo): Use mainwidget
	(addIRCchannel): Move most of code to displayChannelTab and call it.
	(displayChannelTab): New function to do display and numbered
	labeling of channel tabs.
	(newIRCchannel): Store the channel name in lowercase.  Initialise
	chanusers and chantopic in result.
	(hideCurrentChannel): New function to hide current channel tab.
	(hideIRCchannel): New function to hide a channel tab, say when
	parting it.
	(doRemoveNthPage): New function to remove nth tab from notebook if
	more than one.
	(updateTabLabels): New function to update tab labels after
	removing one.  Currently nop, but will be used to renumber the
	labels.
	(writeTextLn): Remove old getClockTime call.  Display channel if
	it is hidden.
	(sendLine): No longer takes real chan argument.  Now accepts all
	input without question, since virtual chan's input now defaults to
	command.

	* lib/Display.hs: Temporary module Display, until Gdk.beep is in
	gtk2hs.

	* lib/Debug.hs: Debugging output module added.

2003-06-01  Jens Petersen  <petersen@haskell.org>

	* configure.ac: Bump version to 0.1.90.

	* lib/WordString.hs: Added WordString library to handle Strings
	of space-separated words.

	* lib/Directories.hs: Added Directories library.

	* Config.hs: New module to carry configuration variables.

	* CTCP.hs: New module to handle ctcp quoting and unquoting.

	* ANNOUNCE: New file carrying last release annoucement.

	* Makefile.am (LIBMODULES): Add WordString.hs.
	(hircules_SOURCES): Add CTCP.hs and Config.hs.

	* Main.hs: Import getenv instead of getLoginName.  Import CTCP,
	configDir, logDir, Directories and WordString.
	(main'): Create configDir and logDir at startup if they doesn't exist.
	(ircMain): Get the user name from USER environment variable,
	rather than getLoginName, since the later wasn't working when not
	run from a tty.
	(doJOIN): Tail is now a WordString.
	(doQUIT): Ditto.
	(doERROR): Ditto.
	(doNICK): Ditto.
	(doRPL_WELCOME): Middle is now a WordString.
	(doDisplay): Keep output text in var text, and log it.
	(tranform): Now just takes user's nick and returns the output
	string and irc channel.  Middle and tail are now WordString's.
	Handle CTCP quoting in PRIVMSGs.  Display other users' email
	addresses too when they join a channel.  Display MODE changes.
	Use (+-+).
	(formatCTCP): New function to handle ACTIONs.
	(doPRIVMSG'): Move into doPRIVMSG.
	(doPRIVMSG): Middle and tail are now WordString's.
	Pass nick to doPersonalMsg and doPublicMsg.
	(doPersonalMsg): Take nick as extra argument.  Middle is now a
	WordString.  Specify the CTCP quote before PING.
	(doPublicMsg): Take nick as extra argument.  Tail is now a
	WordString.
	(processInput): Define text and alltext to hold output for real
	channel and allchannel.  Log alltext.  Send message with ircWrite.
	(parseCmd): Middle and tail are now WordString's.
	Support "/me" actions.  Remove startColon.

	* IRC.hs: No longer export ircSend and removeLeadColon.
	Export logMessage, msgUser and removeChannel.
	Import hPutStrLn, logDir from Config, (+/+) from Directories and
	WordString.
	(IRCRState): Add ircLogFile.
	(IRCMessage): Make msgMiddle and msgTail be String's.  Adjust Show
	instance accordingly.
	(msgUser): New function to extract "user@host" from IRCMessage.
	(mkIrcMessage): Take String's for middle and tail.
	(mkIrcMessageWithPrefix): Ditto.
	(ircSignOn): Middle and tail are now String's.
	(ircPrivmsg'): Ditto.
	(ircTopic): Ditto.
	(ircQuit): Ditto.
	(ircJoin): Ditto.
	(ircPart): Ditto.
	(ircSend): Removed.
	(runIRC): Open log file with LineBuffering, and put it in IRCRState.
	(rawchannel): Moved to GUI.
	(readerLoop'): Remove trailing newline.  Don't split input into words,
	instead treat it as a WordString - middle and tail now String's.
	(removeLeadColon): Removed.
	(writerLoop'): Add carriage-return to hPutStrLn, not encmsg.
	(encodeParams): Middle is now a String.
	(encodeTail): Tail is now a String.
	(decodeMessage): Message input now passed as a String and
	processed as a WordString.  Use breakString to split middle and tail.
	(startColon): Removed.
	(ctcpQuote): Moved to CTCP.
	(ctcpDequote): Ditto.
	(logMessage): New function to log message to logfile.

	* GUI.hs: Export newIRCchannel, rawchannel and timeStamp.
	Import unless from Monad and toContainer from Hierarchy.
	Add chanbox Container to IRCChannel datatype.
	(rawchannel): New unsafe constant for the "raw" irc channel.
	(MainWidget): New type alias to hold the main appl widget, eg notebook.
	(toMainWidget): New function to cast widget to MainWidget.
	(mainWidget): unsafe MVar to hold current MainWidget.
	(mainwindow): unsafe constant to hold main window.
	(setupGUI): Use mainwindow, and mainWidget
	(globalKeyBindings): Add "F2" to switch to tabs, and "F3" to
	switch to raw channel.
	(switchToTab): Switch to notebook, if mainWidget is not.
	(switchTo): New function to switch MainWidget.
	(addIRCchannel): Code to generate IRCChannel moved to newIRCchannel.
	Use it.
	(newIRCchannel): Taken out of addIRCchannel.
	Add chanbox to result.
	(writeTextLn): Use timeStamp.  Place TextBuffer cursor at end.
	(timeStamp): New function factored out of writeTextLn.

2003-05-16  Jens Petersen  <petersen@haskell.org>

	* configure.ac: Version 0.1

	* Makefile: Moved to Makefile.am

	* hircules.spec.in: New file.

2003-05-15  Jens Petersen  <petersen@haskell.org>

	* Version.hs: Moved to "lib/Version.hs.in".

	* Threads.hs: Moved to "lib/".
	
	* Main.hs: Disable most of the lambdabot extension modules for
	now.
	(myuserinfo): In here for now, until user configuration done.
	(Flag): For getopt parsing added.
	(options): Ditto.
	(main): New function to do cmdline parsing.
	(progname): Unsafe constant added.
	(help): Added for getopt help output.
	(main'): Renamed from main.
	(ircMain): Install less extensions.
	(doRPL_WELCOME): Disable autojoins for now.
	(parseCmd): Fix "/topic" with no args to send channel name in tail.
	"/quit" uses versionString.
	
	* IRC.hs (ircnick): Lambdabot compatibility function.
	(ircSignOn): Sign on with name in tail not middle.
	(runIRC): Now just takes one string argument "host:port". Parse
	it.  Disable admin privelege in initState for now.

	* GUI.hs (setupGUI): Disable vpane temporarily for 0.1 release.

2003-05-14  Jens Petersen  <petersen@haskell.org>

	* Threads.hs: New module.
	(threads): MVar to hold list of threads forked.
	(newThread): forkIO wrapper which adds new ThreadId to threads.
	(killThreads): Kill all threads added with newThread.
	(shutDown): Quit gtk and kill threads.

	* TODO: New file.

	* Main.hs (main): Use newThread wrapper instead of forkIO.
	Run killThreads after mainGUI.
	(processReadMessage): Remove debugging msg output.
	Add ERROR message handler.  Remove nop handlers.
	(doJOIN): Use addChannel instead of doJoinChannel.
	(doJoinChannel) Moved to addChannel.
	(doERROR): New handler that shoudl take care of auto-reconnection.
	(doRPL_WELCOME): Check our nick and update state.
	(doDisplay): For other number commands, display rest of middle of
	message, not just last word.
	(doPersonalMsg): Use addChannel instead of doJoinChannel.
	(processInput): Don't display to rawchannel here.

	* IRC.hs (setNick): Update channel nick labels.
	(addChannel): Take real channel arg, instead of topic and chan.
	Check channel membership and nick.  Call addIRCchannel before
	updating ircChannels state.
	(ircSend): Display in rawchannel.
	(runIRC): Use newThread wrapper instead of forkIO.
	(rawchannel): Moved here from GUI.
	(readerLoop): Close handle and terminate on eof.

	* GUI.hs: Add Label record to IRCChannel.
	(rawchannel): Move to IRC module.
	(setupGUI): Add vpane for all channel.
	(globalKeyBindings): Change default modifier from mod4 to Ctrl.
	(addIRCchannel): Add argument nick, and use to for new Label in
	front of entry box.

